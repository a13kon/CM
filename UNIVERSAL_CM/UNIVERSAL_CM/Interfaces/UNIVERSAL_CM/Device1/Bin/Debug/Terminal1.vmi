VM_JSR _Move_DOWN_
VM_WORD_DIR 65535
VM_JSR _Move_UP_
VM_WORD_DIR 65535
VM_JSR _BoolSwap_
VM_WORD_DIR 65535
VM_JSR _SetCurrentValue_
VM_WORD_DIR 65535
VM_JSR _Increment_BYTE_
VM_WORD_DIR 65535
VM_JSR _Decrement_BYTE_
VM_WORD_DIR 65535
VM_JSR _Increment_WORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_WORD_
VM_WORD_DIR 65535
VM_JSR _Increment_DWORD_
VM_WORD_DIR 65535
VM_JSR _Decrement_DWORD_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_0_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_1_
VM_WORD_DIR 65535
VM_JSR _Increment_REAL_2_
VM_WORD_DIR 65535
VM_JSR _Decrement_REAL_2_
VM_WORD_DIR 65535
VM_JSR _TIMED_LOOP_
VM_WORD_DIR 65535
VM_JSR _GlobalEsc_
VM_WORD_DIR 65535
VM_JSR _GotoMain_
VM_WORD_DIR 65535
VM_JSR _gotoAlarmLog_
VM_WORD_DIR 65535
VM_JSR _CheckActiveAlarm_
VM_WORD_DIR 65535
VM_JSR _QuickMenuUP_
VM_WORD_DIR 65535
VM_JSR _QuickMenuDOWN_
VM_WORD_DIR 65535
VM_JSR _QuickMenuENT_
VM_WORD_DIR 65535
VM_JSR _DoNothing_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarmLog_DOWN_
VM_WORD_DIR 65535
VM_JSR _LedBlink_
VM_WORD_DIR 65535
VM_JSR _ResetGlobalAlarm_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_UP_
VM_WORD_DIR 65535
VM_JSR _ScrollAlarm_DOWN_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_DOWN_
VM_WORD_DIR 65535
VM_JSR _OnOffSwitch_UP_
VM_WORD_DIR 65535
VM_JSR _Set_PRG_
VM_WORD_DIR 65535
VM_JSR _Main_PRG_
VM_WORD_DIR 65535
VM_JSR _MainMenu_DOWN_
VM_WORD_DIR 65535
VM_JSR _MainMenu_UP_
VM_WORD_DIR 65535
VM_JSR _MainMenu_ENTER_
VM_WORD_DIR 65535
VM_JSR _MainMenu_ESC_
VM_WORD_DIR 65535
VM_JSR _Stats_1_PRG_
VM_WORD_DIR 65535
VM_JSR _Stats_1_UP_
VM_WORD_DIR 65535
VM_JSR _Stats_1_DOWN_
VM_WORD_DIR 65535
VM_JSR _PopUpQuestion_Confirm_
VM_WORD_DIR 65535
VM_JSR _PopUpQuestion_Reject_
VM_WORD_DIR 65535
VM_JSR _PopUp_ESC_
VM_WORD_DIR 65535
VM_JSR _DOWN_button_
VM_WORD_DIR 65535
VM_JSR _UP_button_
VM_WORD_DIR 65535
VM_JSR _PRG_button_
VM_WORD_DIR 65535
VM_JSR _ENTER_button_
VM_WORD_DIR 65535
VM_JSR _Net_Settings_PRG_
VM_WORD_DIR 65535
VM_JSR _Net_Settings_ESC_
VM_WORD_DIR 65535
VM_JSR _IO_DOWN_
VM_WORD_DIR 65535
VM_JSR _IO_UP_
VM_WORD_DIR 65535
VM_JSR _IO_ENTER_
VM_WORD_DIR 65535
VM_JSR _IO_PRG_
VM_WORD_DIR 65535
VM_JSR _CORR_UP_
VM_WORD_DIR 65535
VM_JSR _CORR_ENTER_
VM_WORD_DIR 65535
VM_JSR _CORR_PRG_
VM_WORD_DIR 65535
VM_JSR _CORR_DOWN_
VM_WORD_DIR 65535
VM_JSR _Hide_Baudrate_Class_UP_
VM_WORD_DIR 65535
VM_JSR _Hide_Baudrate_Class_DOWN_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_PRG_
VM_WORD_DIR 65535
VM_JSR _Upgrade_1_ENTER_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_ESC_
VM_WORD_DIR 65535
VM_JSR _Upgrade_OS_PRG_
VM_WORD_DIR 65535
VM_JSR ___INIT___
VM_WORD_DIR 65535

DCL BOOL X dummy
DCL BOOL X EnPwdChgS
DCL BOOL X EnPwdChgM
DCL INT X IdxImgQM
DCL REAL X BoardTempMsk
DCL DINT X AlrmIdx
DCL DINT X AlrmCode
DCL DINT X AlrmLogsIdx
DCL DINT X AlrmLogCode
DCL USINT X AlrmLogEventType
DCL REAL X AlrmStoredVarReal1
DCL REAL X AlrmStoredVarReal2
DCL BOOL X EnStoredVar1_REAL
DCL BOOL X EnStoredVar2_REAL
DCL DINT X N_Alrms
DCL BOOL X ShowTemp
DCL BOOL X ModePRG
DCL BOOL X NotModePRG
DCL USINT X DTPopUp
DCL BOOL X Show_DTPopUp
DCL BOOL X En_MB_BMS
DCL UDINT X Temp_MB_Baudrate
DCL USINT X Temp_MB_StopBits
DCL USINT X Temp_MB_Parity
DCL USINT X PopUp_Message
DCL USINT X PopUp_Question
DCL BYTE X __SYSVA_TMP_VALUE
DCL INT X __SYSVA_KEY_COUNTER
DCL WORD X __SYSVA_TMP_VALUE
DCL DWORD X __SYSVA_TMP_VALUE
DCL REAL X __SYSVA_TMP_VALUE
DCL USINT X StatePRG
DCL USINT EF STATE_PRG_READY
DCL USINT EF STATE_PRG_ALWAYS_ON
DCL USINT EF STATE_PRG_ON
DCL BOOL EF En_PopUpTimer
DCL USINT EF popup_StatePRG
DCL BOOL EF ReturnToPrevMask
DCL USINT X MaskIDLevel
DCL USINT X MaskIDStore[0]
DCL USINT X Display.MaskID
DCL BOOL X getMainMenu
DCL USINT EF STATE_PRG_OFF
DCL DINT EF AlrmLogsTot
DCL DINT X Alarms.AlrmLogTime
DCL DINT EF infoLogOk
DCL DINT EF LastValidRecord
DCL DINT X CurRow
DCL DINT X CurRow_modePRG
DCL BOOL X getIOList
DCL BOOL X UnitOn
DCL DINT X Display.Index
DCL BOOL X MaskMng.getCorrList
DCL BOOL X UnitOff
DCL BOOL X isUSB
DCL BYTE X Upgrade.UpgradeDrive
DCL BOOL X Upgrade.Check_Upgrade
DCL USINT X NextCycleAction
DCL USINT X CurMenuPoint
DCL USINT X save_MenuPoint[0]
DCL USINT X CurLevel
DCL DINT X Position
DCL DINT X save_Position[0]
DCL DINT X save_CurRow[0]
DCL USINT X Display.Descr[1]
DCL USINT EF SHORT_POPUP_TIME
DCL USINT EF POPUP_TIME
DCL UDINT X BMS.Baudrate
DCL USINT X BMS.Parity
DCL USINT X BMS.StopBits
DCL DINT X CurList_Position
DCL BOOL EF isActiveAlarmLoop
DCL BOOL EF isNoAlarmMask
DCL USINT EF PopUpKeyDelay
DCL USINT X __SYSVA_KEY_PRESSED
DCL USINT X Display.Hint
DCL BOOL X BootEnd
DCL BOOL X RetainIsClear
DCL BOOL EF enEndDef
DCL BOOL EF enLogo
DCL INT EF LogoTime
DCL DINT EF N_Alrms_Prev
DCL BOOL EF EnCheckAlarm
DCL USINT X __SYSVA_MANUAL_BUZZER_OFF
DCL USINT X __SYSVA_MANUAL_BUZZER_ON
DCL DINT X Alarms.AlrmTime
DCL INT EF DTQM
DCL INT EF QUICK_MENU_ITEMS_NO
DCL INT EF DTRetMain
DCL UINT EF PwdIn
DCL BOOL EF EnLogOut
DCL BOOL X StartupJmp
DCL BOOL EF En_CheckAlrm_Reset
DCL INT EF IdxQM
DCL DINT EF AlrmLogsIdxTemp
DCL DINT EF AlrmLogInfoErr
DCL DINT EF AlrmLogCodeTemp
DCL USINT EF AlrmLogEventTypeTemp
DCL DINT EF AlrmLogTimeTemp
DCL BOOL X Alarms.AlrmResByPGD1
DCL BOOL X KeybOnOff
DCL DINT X num_Rows
DCL USINT X Display.UoM[1]
DCL DINT X cnt_Items
DCL BOOL X update_MainMenu_List
DCL USINT X Display.value_Type[1]
DCL INT X Display.value_MinINT[1]
DCL INT X Display.value_MaxINT[1]
DCL USINT X Display.UoM[2]
DCL USINT X Display.UoM[3]
DCL USINT X Display.Descr[2]
DCL USINT X Display.Descr[3]
DCL DINT X EQ_Cooler.CompNum
DCL BOOL X ResetHoursComp[1]
DCL BOOL X ResetHoursComp[2]
DCL BOOL X ResetHoursComp[3]
DCL BOOL X En_Reboot
DCL BOOL X FLR_Disc_CTRL.Active
DCL USINT X Display.value_BOOL[1]
DCL USINT X Display.value_BOOL[2]
DCL BOOL X MaskMng.ValueWasChanged
DCL BOOL X Display.en_RealValue[1]
DCL REAL X Display.value_REAL[1]
DCL REAL X Display.value_MinREAL[1]
DCL REAL X Display.value_MaxREAL[1]
DCL BOOL X Display.en_IntValue[1]
DCL INT X Display.value_INT[1]
DCL USINT X Display.value_BOOL[3]
DCL DINT X mask_List_pos
DCL REAL X Display.value_REAL[8]
DCL INT X Display.value_INT[8]
DCL UDINT X __SYSVA_TMP_VALUE
DCL BOOL X Upgrade.En_FirmWare
DCL BOOL X Upgrade.En_Upgrade
DCL BOOL X Upgrade.REQ_OS_upgrade
DCL BOOL X Upgrade.ANSW_OS_upgrade

; Move_DOWN()
VM_FUNCTION _Move_DOWN_
VM_DATA 0
EF_NEXT_MASK
VM_RTS

; Move_UP()
VM_FUNCTION _Move_UP_
VM_DATA 0
EF_PREVIOUS_MASK
VM_RTS

; BoolSwap()
VM_FUNCTION _BoolSwap_
VM_DATA 0
EF_SWAP
VM_RTS

; SetCurrentValue()
VM_FUNCTION _SetCurrentValue_
VM_DATA 0
EF_COMPARE
EF_NEXT_FIELD
VM_RTS

; Increment_BYTE()
VM_FUNCTION _Increment_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_ADD BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_BYTE()
VM_FUNCTION _Decrement_BYTE_
VM_DATA 0
VM_PUSH BYTE X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT BYTE
VM_SUB BYTE
VM_POP BYTE X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_WORD()
VM_FUNCTION _Increment_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_ADD WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_WORD()
VM_FUNCTION _Decrement_WORD_
VM_DATA 0
VM_PUSH WORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT WORD
VM_SUB WORD
VM_POP WORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_DWORD()
VM_FUNCTION _Increment_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_ADD DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_DWORD()
VM_FUNCTION _Decrement_DWORD_
VM_DATA 0
VM_PUSH DWORD X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DWORD
VM_SUB DWORD
VM_POP DWORD X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_0()
VM_FUNCTION _Increment_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_0()
VM_FUNCTION _Decrement_REAL_0_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_1()
VM_FUNCTION _Increment_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_1()
VM_FUNCTION _Decrement_REAL_1_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; Increment_REAL_2()
VM_FUNCTION _Increment_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_INCR
VM_RTS

; Decrement_REAL_2()
VM_FUNCTION _Decrement_REAL_2_
VM_DATA 0
VM_PUSH REAL X __SYSVA_TMP_VALUE
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 100
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X __SYSVA_TMP_VALUE
EF_CHECK_LIMITS_DECR
VM_RTS

; ButtonsSupport()
VM_FUNCTION _ButtonsSupport_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L0
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L1
VM_LABEL L0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L3
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_LABEL L3
VM_JZ L2
; THEN
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_JUMP L4
VM_LABEL L2
; ELSE
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; END_IF
VM_LABEL L4
VM_LABEL L1
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L7
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_LABEL L7
VM_JZ L6
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_JUMP L8
VM_LABEL L6
; ELSE
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
; END_IF
VM_LABEL L8
VM_PUSH BOOL X ModePRG
VM_NOT BOOL
VM_POP BOOL X NotModePRG
VM_RTS

; ReStoreMaskID()
VM_FUNCTION _ReStoreMaskID_
VM_DATA 0
; IF
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L13
; THEN
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X MaskIDLevel
VM_LABEL L13
; END_IF
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_PUSHI USINT
VM_POP USINT X Display.MaskID
VM_PUSH_IMM USINT 0
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_POPI USINT
VM_RTS

; GotoMain()
VM_FUNCTION _GotoMain_
VM_DATA 0
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.MaskID
EF_GOTO_MASK Main
VM_RTS

; CheckStoredVar_Log()
VM_FUNCTION _CheckStoredVar_Log_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L38
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L39
VM_LABEL L38
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L39
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 42
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L41
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L42
VM_LABEL L41
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L42
VM_RTS

; gotoAlarmLog()
VM_FUNCTION _gotoAlarmLog_
VM_DATA 0
VM_SYSTEM 39
VM_POP DINT EF AlrmLogsTot
; IF
VM_PUSH DINT EF AlrmLogsTot
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L37
; THEN
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF infoLogOk
VM_JSR _CheckStoredVar_Log_
VM_JUMP L44
VM_LABEL L37
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmLogsIdx
VM_PUSH_IMM DINT -1
VM_POP DINT EF infoLogOk
; END_IF
VM_LABEL L44
; IF
VM_PUSH DINT EF infoLogOk
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L46
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF LastValidRecord
EF_GOTO_MASK Alrms_Log
VM_JUMP L47
VM_LABEL L46
; ELSE
EF_GOTO_MASK Alrms_NoLog
; END_IF
VM_LABEL L47
VM_RTS

; SaveMenuPos()
VM_FUNCTION _SaveMenuPos_
VM_DATA 0
VM_PUSH USINT X CurMenuPoint
VM_PUSH_AMP USINT X save_MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI USINT
VM_PUSH DINT X Position
VM_PUSH_AMP DINT X save_Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH DINT X CurRow
VM_PUSH_AMP DINT X save_CurRow[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_AMP USINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_POP USINT X CurMenuPoint
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L69
; THEN
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X CurLevel
VM_JUMP L70
VM_LABEL L69
; ELSE
VM_PUSH_IMM USINT 10
VM_POP USINT X CurLevel
; END_IF
VM_LABEL L70
VM_RTS

; ShowPopUpMessage(USINT, USINT, BOOL)
VM_FUNCTION _ShowPopUpMessage_USINT_USINT_BOOL_
VM_DATA 3
VM_POPL BOOL 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
; IF
VM_PUSHL BOOL 2
VM_JZ L66
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ReturnToPrevMask
VM_JUMP L67
VM_LABEL L66
; ELSE
EF_STORE_MASK
VM_JSR _SaveMenuPos_
; END_IF
VM_LABEL L67
VM_PUSHL USINT 1
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_DTPopUp
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_PopUpTimer
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; LoadMaskID(USINT, USINT)
VM_FUNCTION _LoadMaskID_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSHL USINT 0
VM_POP USINT X Display.MaskID
; CASE
VM_PUSHL USINT 0
; OF
VM_CASE USINT 1 L18
VM_CASE USINT 3 L19
VM_CASE USINT 4 L20
VM_CASE USINT 8 L21
VM_CASE USINT 11 L22
VM_CASE USINT 12 L23
VM_CASE USINT 13 L24
VM_CASE USINT 14 L25
VM_CASE USINT 20 L26
VM_CASE USINT 21 L27
VM_CASE USINT 22 L28
VM_CASE USINT 23 L29
VM_CASE USINT 25 L30
VM_CASE USINT 27 L31
VM_CASE USINT 30 L32
VM_CASE USINT 31 L33
VM_CASE USINT 34 L34
VM_CASE USINT 40 L35
VM_CASE USINT 42 L36
VM_POP_AWAY USINT
VM_JUMP L17
VM_LABEL L18
EF_GOTO_MASK Main
VM_JUMP L17
VM_LABEL L19
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_GOTO_MASK MainMenu
VM_JUMP L17
VM_LABEL L20
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
EF_GOTO_MASK OnOff
VM_JUMP L17
VM_LABEL L21
VM_JSR _gotoAlarmLog_
VM_JUMP L17
VM_LABEL L22
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L49
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L50
VM_LABEL L49
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L50
EF_GOTO_MASK IO_DI
VM_JUMP L17
VM_LABEL L23
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L52
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L53
VM_LABEL L52
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L53
EF_GOTO_MASK IO_AI
VM_JUMP L17
VM_LABEL L24
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L55
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L56
VM_LABEL L55
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L56
EF_GOTO_MASK IO_DO
VM_JUMP L17
VM_LABEL L25
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getIOList
; IF
VM_PUSH BOOL X UnitOn
VM_JZ L58
; THEN
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JUMP L59
VM_LABEL L58
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L59
EF_GOTO_MASK IO_AO
VM_JUMP L17
VM_LABEL L26
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK Fridge_Params_1
VM_JUMP L17
VM_LABEL L27
VM_PUSH_IMM DINT 1
VM_POP DINT X Display.Index
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK Stats_1
VM_JUMP L17
VM_LABEL L28
VM_JUMP L17
VM_LABEL L29
VM_JUMP L17
VM_LABEL L30
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.getCorrList
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK CORR_AI
VM_JUMP L17
VM_LABEL L31
; IF
VM_PUSH BOOL X UnitOff
VM_JZ L61
; THEN
; IF
VM_PUSHL USINT 1
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L62
; THEN
; IF
VM_PUSH BOOL X isUSB
VM_JZ L63
; THEN
VM_PUSH_IMM BYTE 1
VM_POP BYTE X Upgrade.UpgradeDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_POP USINT X NextCycleAction
VM_JUMP L64
VM_LABEL L63
; ELSE
VM_PUSH_IMM USINT 24
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L64
VM_JUMP L72
VM_LABEL L62
; ELSE
VM_PUSH_IMM BYTE 0
VM_POP BYTE X Upgrade.UpgradeDrive
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_PUSH USINT EF STATE_PRG_ALWAYS_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L72
VM_JUMP L74
VM_LABEL L61
; ELSE
VM_PUSH_IMM USINT 1
VM_PUSH USINT EF POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
; END_IF
VM_LABEL L74
VM_JUMP L17
VM_LABEL L32
VM_JUMP L17
VM_LABEL L33
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF ReturnToPrevMask
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSHL USINT 1
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_JUMP L17
VM_LABEL L34
VM_PUSH UDINT X BMS.Baudrate
VM_POP UDINT X Temp_MB_Baudrate
VM_PUSH USINT X BMS.Parity
VM_POP USINT X Temp_MB_Parity
VM_PUSH USINT X BMS.StopBits
VM_POP USINT X Temp_MB_StopBits
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_MB_BMS
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
EF_GOTO_MASK BMS_Settings
VM_JUMP L17
VM_LABEL L35
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_GOTO_MASK Fridge_1_1
VM_JUMP L17
VM_LABEL L36
EF_GOTO_MASK SwInfo
VM_LABEL L17
VM_RTS

; LoadMenuPos()
VM_FUNCTION _LoadMenuPos_
VM_DATA 0
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 0
VM_CMP_GT USINT
VM_JZ L76
; THEN
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X CurLevel
VM_JUMP L77
VM_LABEL L76
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X CurLevel
; END_IF
VM_LABEL L77
VM_PUSH_AMP USINT X save_MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI USINT
VM_POP USINT X CurMenuPoint
VM_PUSH_AMP DINT X save_Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X Position
VM_PUSH_AMP DINT X save_CurRow[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_PUSHI DINT
VM_POP DINT X CurRow
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_PUSH_IMM USINT 0
VM_PUSH_AMP USINT X save_MenuPoint[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI USINT
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X save_Position[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_PUSH_IMM DINT 0
VM_PUSH_AMP DINT X save_CurRow[0]
VM_PUSH USINT X CurLevel
VM_ADDRESS USINT 0 10 16
VM_POPI DINT
VM_RTS

; resetConditions()
VM_FUNCTION _resetConditions_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH_IMM USINT 4
VM_CMP_EQ USINT
VM_JZ L79
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_JUMP L80
VM_LABEL L79
; ELSE
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
; END_IF
VM_LABEL L80
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_RTS

; GlobalEsc()
VM_FUNCTION _GlobalEsc_
VM_DATA 0
VM_JSR _ReStoreMaskID_
; CASE
VM_PUSH USINT X Display.MaskID
; OF
VM_CASE USINT 0 L15
VM_CASE USINT 1 L15
VM_CASE USINT 3 L16
VM_POP_AWAY USINT
VM_JUMP L14
VM_LABEL L15
VM_JSR _GotoMain_
VM_JUMP L14
VM_LABEL L16
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 3
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_JSR _LoadMenuPos_
VM_LABEL L14
VM_JSR _resetConditions_
VM_PUSH_IMM BOOL 0
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X NotModePRG
VM_RTS

; PopUp_ESC()
VM_FUNCTION _PopUp_ESC_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
; IF
VM_PUSH BOOL EF ReturnToPrevMask
VM_JZ L12
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF ReturnToPrevMask
VM_JSR _GlobalEsc_
VM_JUMP L82
VM_LABEL L12
; ELSE
; CASE
VM_PUSH USINT EF popup_StatePRG
; OF
VM_CASE USINT 3 L85
VM_POP_AWAY USINT
VM_JUMP L84
VM_LABEL L85
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ModePRG
VM_PUSH_IMM BOOL 0
VM_POP BOOL X NotModePRG
VM_LABEL L84
EF_RESTORE_MASK
VM_JSR _LoadMenuPos_
; END_IF
VM_LABEL L82
VM_RTS

; PopUpSupport()
VM_FUNCTION _PopUpSupport_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_PopUpTimer
VM_JZ L10
; THEN
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_LE USINT
VM_JZ L11
; THEN
VM_JSR _PopUp_ESC_
VM_JUMP L86
VM_LABEL L11
; ELSE
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_POP USINT X DTPopUp
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT EF PopUpKeyDelay
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L88
; THEN
; IF
VM_PUSH USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L89
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_JUMP L90
VM_LABEL L89
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
; END_IF
VM_LABEL L90
VM_LABEL L88
; END_IF
; IF
VM_PUSH USINT X DTPopUp
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L92
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
VM_LABEL L92
; END_IF
; END_IF
VM_LABEL L86
VM_JUMP L93
VM_LABEL L10
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT EF PopUpKeyDelay
VM_PUSH_IMM USINT 0
VM_POP USINT X DTPopUp
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Show_DTPopUp
; END_IF
VM_LABEL L93
VM_RTS

; UpdateCurPos()
VM_FUNCTION _UpdateCurPos_
VM_DATA 0
; IF
VM_PUSH BOOL X ModePRG
VM_JZ L101
; THEN
VM_PUSH_AMP USINT X Display.Descr[1]
VM_PUSH DINT X CurRow_modePRG
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_POP USINT X Display.Hint
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow_modePRG
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_JUMP L102
VM_LABEL L101
; ELSE
VM_PUSH_AMP USINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_POP USINT X Display.Hint
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
; END_IF
VM_LABEL L102
VM_RTS

; NextCycleAction()
VM_FUNCTION _NextCycleAction_
VM_DATA 0
; IF
VM_PUSH USINT X NextCycleAction
VM_PUSH_IMM USINT 0
VM_CMP_NE USINT
VM_JZ L95
; THEN
; CASE
VM_PUSH USINT X NextCycleAction
; OF
VM_CASE USINT 1 L97
VM_CASE USINT 4 L98
VM_CASE USINT 12 L99
VM_CASE USINT 30 L100
VM_POP_AWAY USINT
VM_JUMP L96
VM_LABEL L97
EF_RESTORE_MASK
VM_JUMP L96
VM_LABEL L98
EF_GOTO_MASK Upgrade_OS
VM_JUMP L96
VM_LABEL L99
VM_JSR _UpdateCurPos_
VM_JUMP L96
VM_LABEL L100
VM_PUSH_IMM USINT 20
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM BOOL 1
VM_JSR _ShowPopUpMessage_USINT_USINT_BOOL_
VM_LABEL L96
VM_PUSH_IMM USINT 0
VM_POP USINT X NextCycleAction
VM_LABEL L95
; END_IF
VM_RTS

; Boot()
VM_FUNCTION _Boot_
VM_DATA 0
; IF
VM_PUSH BOOL X RetainIsClear
VM_JZ L105
; THEN
; IF
VM_PUSH BOOL EF enEndDef
VM_NOT BOOL
VM_JZ L106
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enEndDef
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK EndDefault
VM_LABEL L106
; END_IF
VM_JUMP L107
VM_LABEL L105
; IF
VM_PUSH BOOL EF enLogo
VM_PUSH_IMM BOOL 0
VM_CMP_EQ BOOL
VM_JZ L108
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF enLogo
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
EF_GOTO_MASK LogoMask
VM_PUSH_IMM INT 5
VM_POP INT EF LogoTime
VM_JUMP L109
VM_LABEL L108
; IF
VM_PUSH INT EF LogoTime
VM_PUSH_IMM INT 0
VM_CMP_GT INT
VM_JZ L110
; THEN
VM_PUSH INT EF LogoTime
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF LogoTime
VM_JUMP L111
VM_LABEL L110
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X BootEnd
VM_JSR _GotoMain_
; END_IF
VM_LABEL L111
VM_LABEL L109
VM_LABEL L107
VM_RTS

; CheckStoredVar_Alrm()
VM_FUNCTION _CheckStoredVar_Alrm_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 1
VM_PUSH_AMP REAL X AlrmStoredVarReal1
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L119
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar1_REAL
VM_JUMP L120
VM_LABEL L119
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar1_REAL
; END_IF
VM_LABEL L120
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM USINT 2
VM_PUSH_AMP REAL X AlrmStoredVarReal2
VM_SYSTEM 35
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L122
; THEN
VM_PUSH_IMM BOOL 0
VM_POP BOOL X EnStoredVar2_REAL
VM_JUMP L123
VM_LABEL L122
; ELSE
VM_PUSH_IMM BOOL 1
VM_POP BOOL X EnStoredVar2_REAL
; END_IF
VM_LABEL L123
VM_RTS

; CheckActiveAlarm()
VM_FUNCTION _CheckActiveAlarm_
VM_DATA 4
VM_PUSH_IMM DINT 7
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnCheckAlarm
VM_SYSTEM 32
VM_POP DINT X N_Alrms
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L118
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 1
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POPL DINT 0
VM_JSR _CheckStoredVar_Alrm_
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isActiveAlarmLoop
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isNoAlarmMask
EF_GOTO_MASK Alrms_Active
VM_JUMP L125
VM_LABEL L118
; ELSE
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 1
VM_CMP_LE INT
VM_JZ L127
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF isNoAlarmMask
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF isActiveAlarmLoop
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L128
VM_LABEL L127
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L129
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
VM_LABEL L129
; END_IF
VM_LABEL L128
; END_IF
VM_LABEL L125
VM_RTS

; CheckAlarm()
VM_FUNCTION _CheckAlarm_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_GT DINT
VM_JZ L115
; THEN
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF EnCheckAlarm
; IF
VM_PUSH BOOL EF isNoAlarmMask
VM_DUP BOOL
VM_JNZ L117
VM_POP_AWAY BOOL
VM_PUSH BOOL EF isActiveAlarmLoop
VM_LABEL L117
VM_JZ L116
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L116
; END_IF
VM_JUMP L130
VM_LABEL L115
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L132
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_LABEL L132
VM_JZ L131
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X __SYSVA_MANUAL_BUZZER_OFF
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_MANUAL_BUZZER_ON
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 0
VM_SYSTEM 18
VM_POP_AWAY DINT
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L133
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L133
; END_IF
VM_JUMP L134
VM_LABEL L131
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH DINT EF N_Alrms_Prev
VM_CMP_LT DINT
VM_JZ L135
; THEN
; IF
VM_PUSH BOOL EF isActiveAlarmLoop
VM_JZ L136
; THEN
VM_JSR _CheckActiveAlarm_
VM_LABEL L136
; END_IF
VM_LABEL L135
; END_IF
VM_LABEL L134
VM_LABEL L130
VM_PUSH DINT X N_Alrms
VM_POP DINT EF N_Alrms_Prev
VM_RTS

; BlinkQuickMenu()
VM_FUNCTION _BlinkQuickMenu_
VM_DATA 0
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L138
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_ADD INT
VM_CMP_LT INT
VM_LABEL L138
VM_JZ L137
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_ADD INT
VM_POP INT X IdxImgQM
VM_JUMP L139
VM_LABEL L137
; IF
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_CMP_EQ INT
VM_DUP BOOL
VM_JZ L141
VM_POP_AWAY BOOL
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_LABEL L141
VM_JZ L140
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTQM
VM_PUSH INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_SUB INT
VM_POP INT X IdxImgQM
VM_LABEL L140
; END_IF
VM_LABEL L139
VM_PUSH INT EF DTQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTQM
VM_RTS

; RetMainMsk()
VM_FUNCTION _RetMainMsk_
VM_DATA 0
; IF
VM_PUSH USINT X __SYSVA_KEY_PRESSED
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L142
; THEN
VM_PUSH_IMM INT 0
VM_POP INT EF DTRetMain
VM_PUSH_IMM USINT 0
VM_POP USINT X __SYSVA_KEY_PRESSED
VM_JUMP L143
VM_LABEL L142
; IF
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 300
VM_CMP_EQ INT
VM_JZ L144
; THEN
VM_PUSH_IMM UINT 0
VM_POP UINT EF PwdIn
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF EnLogOut
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
VM_JSR _resetConditions_
VM_JSR _GotoMain_
VM_LABEL L144
; END_IF
VM_LABEL L143
; IF
VM_PUSH BOOL X StartupJmp
VM_NOT BOOL
VM_JZ L145
; THEN
VM_PUSH INT EF DTRetMain
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF DTRetMain
VM_LABEL L145
; END_IF
VM_RTS

; CheckAlrm_Reset()
VM_FUNCTION _CheckAlrm_Reset_
VM_DATA 0
; IF
VM_PUSH BOOL EF En_CheckAlrm_Reset
VM_JZ L146
; THEN
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L147
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_JUMP L148
VM_LABEL L147
; ELSE
VM_JSR _CheckActiveAlarm_
; END_IF
VM_LABEL L148
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_CheckAlrm_Reset
VM_LABEL L146
; END_IF
VM_RTS

; TIMED_LOOP()
VM_FUNCTION _TIMED_LOOP_
VM_DATA 0
VM_JSR _ButtonsSupport_
VM_JSR _PopUpSupport_
VM_JSR _NextCycleAction_
; IF
VM_PUSH BOOL X BootEnd
VM_NOT BOOL
VM_JZ L104
; THEN
VM_JSR _Boot_
VM_JUMP L113
VM_LABEL L104
; ELSE
VM_JSR _CheckAlarm_
VM_JSR _BlinkQuickMenu_
VM_JSR _RetMainMsk_
VM_JSR _CheckAlrm_Reset_
; END_IF
VM_LABEL L113
VM_RTS

; QuickMenuUP()
VM_FUNCTION _QuickMenuUP_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_CMP_GT INT
VM_JZ L150
; THEN
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_JUMP L151
VM_LABEL L150
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L151
VM_RTS

; QuickMenuDOWN()
VM_FUNCTION _QuickMenuDOWN_
VM_DATA 0
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT EF IdxQM
; IF
VM_PUSH INT EF IdxQM
VM_PUSH_IMM INT 1
VM_CMP_LT INT
VM_JZ L153
; THEN
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT X IdxImgQM
VM_PUSH INT EF QUICK_MENU_ITEMS_NO
VM_POP INT EF IdxQM
VM_JUMP L154
VM_LABEL L153
; ELSE
VM_PUSH INT X IdxImgQM
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X IdxImgQM
; END_IF
VM_LABEL L154
VM_RTS

; QuickMenuENT()
VM_FUNCTION _QuickMenuENT_
VM_DATA 0
; CASE
VM_PUSH INT EF IdxQM
; OF
VM_CASE INT 1 L157
VM_CASE INT 2 L158
VM_CASE INT 3 L159
VM_POP_AWAY INT
VM_JUMP L156
VM_LABEL L157
EF_GOTO_MASK OnOff
VM_JUMP L156
VM_LABEL L158
EF_GOTO_MASK Fridge_1_1
VM_JUMP L156
VM_LABEL L159
EF_GOTO_MASK SwInfo
VM_LABEL L156
VM_RTS

; DoNothing()
VM_FUNCTION _DoNothing_
VM_DATA 0
VM_RTS

; ScrollAlarmLog_UP()
VM_FUNCTION _ScrollAlarmLog_UP_
VM_DATA 0
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L160
; THEN
EF_BEEP
VM_JUMP L161
VM_LABEL L160
; ELSE
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
; END_IF
VM_LABEL L161
VM_RTS

; ScrollAlarmLog_DOWN()
VM_FUNCTION _ScrollAlarmLog_DOWN_
VM_DATA 0
VM_PUSH DINT X AlrmLogsIdx
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT EF AlrmLogsIdxTemp
VM_PUSH DINT EF AlrmLogsIdxTemp
VM_PUSH_AMP DINT EF AlrmLogCodeTemp
VM_PUSH_AMP USINT EF AlrmLogEventTypeTemp
VM_PUSH_AMP DINT EF AlrmLogTimeTemp
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
; IF
VM_PUSH DINT EF AlrmLogInfoErr
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L163
; THEN
EF_BEEP
VM_JUMP L164
VM_LABEL L163
; ELSE
; IF
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 64
VM_CMP_LT DINT
VM_JZ L166
; THEN
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmLogsIdx
VM_PUSH DINT X AlrmLogsIdx
VM_PUSH_AMP DINT X AlrmLogCode
VM_PUSH_AMP USINT X AlrmLogEventType
VM_PUSH_AMP DINT X Alarms.AlrmLogTime
VM_SYSTEM 40
VM_POP DINT EF AlrmLogInfoErr
VM_JSR _CheckStoredVar_Log_
VM_JUMP L167
VM_LABEL L166
; ELSE
VM_PUSH_IMM DINT 64
VM_POP DINT X AlrmLogsIdx
EF_BEEP
; END_IF
VM_LABEL L167
; END_IF
VM_LABEL L164
VM_RTS

; LedBlink()
VM_FUNCTION _LedBlink_
VM_DATA 0
VM_PUSH_IMM DINT 12
VM_PUSH_IMM DINT 2
VM_SYSTEM 18
VM_POP_AWAY DINT
VM_RTS

; ResetGlobalAlarm()
VM_FUNCTION _ResetGlobalAlarm_
VM_DATA 0
; IF
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM INT 3
VM_CMP_GE INT
VM_JZ L169
; THEN
VM_SYSTEM 36
VM_POP_AWAY DINT
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Alarms.AlrmResByPGD1
VM_PUSH_IMM DINT 1
VM_POP DINT X AlrmIdx
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_CheckAlrm_Reset
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_LABEL L169
; END_IF
VM_RTS

; ScrollAlarm_UP()
VM_FUNCTION _ScrollAlarm_UP_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GT DINT
VM_JZ L170
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_DUP BOOL
VM_JZ L172
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LE DINT
VM_LABEL L172
VM_JZ L171
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X AlrmIdx
VM_JUMP L173
VM_LABEL L171
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L174
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_JUMP L175
VM_LABEL L174
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L177
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L177
VM_JZ L176
; THEN
VM_PUSH DINT X N_Alrms
VM_POP DINT X AlrmIdx
EF_PREVIOUS_MASK
VM_LABEL L176
; END_IF
VM_LABEL L175
VM_LABEL L173
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L178
VM_LABEL L170
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L179
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L179
; END_IF
VM_LABEL L178
VM_RTS

; ScrollAlarm_DOWN()
VM_FUNCTION _ScrollAlarm_DOWN_
VM_DATA 0
VM_SYSTEM 32
VM_POP DINT X N_Alrms
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_DUP BOOL
VM_JZ L181
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L181
VM_JZ L180
; THEN
EF_NEXT_MASK
VM_LABEL L180
; END_IF
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L183
VM_POP_AWAY BOOL
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_LABEL L183
VM_JZ L182
; THEN
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 0
VM_CMP_GE DINT
VM_DUP BOOL
VM_JZ L185
VM_POP_AWAY BOOL
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_LT DINT
VM_LABEL L185
VM_JZ L184
; THEN
VM_PUSH DINT X AlrmIdx
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X AlrmIdx
VM_JUMP L186
VM_LABEL L184
; IF
VM_PUSH DINT X AlrmIdx
VM_PUSH DINT X N_Alrms
VM_CMP_GE DINT
VM_JZ L187
; THEN
VM_PUSH_IMM DINT 0
VM_POP DINT X AlrmIdx
EF_NEXT_MASK
VM_LABEL L187
; END_IF
VM_LABEL L186
VM_PUSH DINT X AlrmIdx
VM_PUSH_AMP DINT X AlrmCode
VM_PUSH_AMP DINT X Alarms.AlrmTime
VM_SYSTEM 33
VM_POP_AWAY DINT
VM_JSR _CheckStoredVar_Alrm_
VM_JUMP L188
VM_LABEL L182
; IF
VM_PUSH DINT X N_Alrms
VM_PUSH_IMM DINT 0
VM_CMP_EQ DINT
VM_JZ L189
; THEN
EF_GOTO_MASK Alrms_NoAlrms
VM_LABEL L189
; END_IF
VM_LABEL L188
VM_RTS

; OnOffSwitch_DOWN()
VM_FUNCTION _OnOffSwitch_DOWN_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X KeybOnOff
VM_RTS

; OnOffSwitch_UP()
VM_FUNCTION _OnOffSwitch_UP_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X KeybOnOff
VM_RTS

; Set_PRG()
VM_FUNCTION _Set_PRG_
VM_DATA 0
VM_RTS

; StoreMaskID()
VM_FUNCTION _StoreMaskID_
VM_DATA 0
VM_PUSH USINT X Display.MaskID
VM_PUSH_AMP USINT X MaskIDStore[0]
VM_PUSH USINT X MaskIDLevel
VM_ADDRESS USINT 0 9 16
VM_POPI USINT
; IF
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 9
VM_CMP_LT USINT
VM_JZ L190
; THEN
VM_PUSH USINT X MaskIDLevel
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_POP USINT X MaskIDLevel
VM_LABEL L190
; END_IF
VM_RTS

; GotoMaskID(USINT)
VM_FUNCTION _GotoMaskID_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_JSR _StoreMaskID_
VM_PUSHL USINT 0
VM_PUSH_IMM USINT 0
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; Main_PRG()
VM_FUNCTION _Main_PRG_
VM_DATA 0
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_PUSH_IMM USINT 0
VM_POP USINT X CurMenuPoint
VM_PUSH_IMM USINT 1
VM_POP USINT X CurLevel
VM_PUSH_IMM USINT 3
VM_JSR _GotoMaskID_USINT_
VM_RTS

; MainMenu_DOWN()
VM_FUNCTION _MainMenu_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH DINT X num_Rows
VM_CMP_LT DINT
VM_JZ L191
; THEN
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X CurRow
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_JUMP L192
VM_LABEL L191
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_CMP_GT DINT
VM_JZ L194
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_LABEL L194
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_MainMenu_List
; END_IF
VM_LABEL L192
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_RTS

; MainMenu_UP()
VM_FUNCTION _MainMenu_UP_
VM_DATA 0
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L195
; THEN
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_SUB USINT
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurRow
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_ADD USINT
VM_PUSH_AMP USINT X Display.UoM[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_POPI USINT
VM_JUMP L196
VM_LABEL L195
; ELSE
VM_PUSH DINT X Position
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Position
; IF
VM_PUSH DINT X Position
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L198
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_PUSH DINT X num_Rows
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Position
VM_PUSH DINT X num_Rows
VM_POP DINT X CurRow
VM_LABEL L198
; END_IF
VM_PUSH_IMM BOOL 1
VM_POP BOOL X update_MainMenu_List
; END_IF
VM_LABEL L196
VM_PUSH DINT X Position
VM_PUSH DINT X CurRow
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X CurList_Position
VM_RTS

; GotoMaskID(USINT, USINT)
VM_FUNCTION _GotoMaskID_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_JSR _StoreMaskID_
VM_PUSHL USINT 0
VM_PUSHL USINT 1
VM_JSR _LoadMaskID_USINT_USINT_
VM_RTS

; MainMenu_ENTER()
VM_FUNCTION _MainMenu_ENTER_
VM_DATA 0
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L199
; THEN
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 10
VM_CMP_LT USINT
VM_JZ L200
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP USINT X Display.Descr[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_POP USINT X CurMenuPoint
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_LABEL L200
; END_IF
VM_PUSH_IMM DINT 1
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 1
VM_POP DINT X Position
VM_JUMP L201
VM_LABEL L199
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L202
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_JSR _GotoMaskID_USINT_USINT_
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.UoM[1]
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.UoM[2]
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.UoM[3]
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.Descr[1]
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.Descr[2]
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.Descr[3]
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_JUMP L203
VM_LABEL L202
; IF
VM_PUSH_AMP USINT X Display.value_Type[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI USINT
VM_PUSH_IMM USINT 2
VM_CMP_EQ USINT
VM_JZ L204
; THEN
VM_JSR _SaveMenuPos_
VM_PUSH_AMP INT X Display.value_MinINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_PUSH_AMP INT X Display.value_MaxINT[1]
VM_PUSH DINT X CurRow
VM_ADDRESS DINT 1 8 16
VM_PUSHI INT
VM_CAST INT USINT
VM_JSR _GotoMaskID_USINT_USINT_
VM_LABEL L204
; END_IF
VM_LABEL L203
VM_LABEL L201
VM_PUSH_IMM DINT 1
VM_POP DINT X CurList_Position
VM_RTS

; MainMenu_ESC()
VM_FUNCTION _MainMenu_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X CurLevel
VM_PUSH_IMM USINT 1
VM_CMP_GT USINT
VM_JZ L205
; THEN
VM_JSR _LoadMenuPos_
VM_PUSH_IMM BOOL 1
VM_POP BOOL X getMainMenu
VM_JUMP L206
VM_LABEL L205
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L206
VM_RTS

; ShowPopUpQuestion(USINT)
VM_FUNCTION _ShowPopUpQuestion_USINT_
VM_DATA 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSH_IMM BOOL 0
VM_POP BOOL EF En_PopUpTimer
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Question
EF_GOTO_MASK PopUp_Question_Mask
VM_RTS

; Stats_1_PRG()
VM_FUNCTION _Stats_1_PRG_
VM_DATA 0
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_CMP_EQ DINT
VM_JZ L208
; THEN
VM_PUSH_IMM USINT 8
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L209
VM_LABEL L208
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 2
VM_CMP_EQ DINT
VM_JZ L210
; THEN
VM_PUSH_IMM USINT 9
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L211
VM_LABEL L210
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L212
; THEN
VM_PUSH_IMM USINT 10
VM_JSR _ShowPopUpQuestion_USINT_
VM_LABEL L212
; END_IF
VM_LABEL L211
VM_LABEL L209
VM_RTS

; Stats_1_UP()
VM_FUNCTION _Stats_1_UP_
VM_DATA 0
; IF
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_CMP_GT DINT
VM_JZ L213
; THEN
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X Display.Index
VM_JUMP L214
VM_LABEL L213
; ELSE
VM_PUSH DINT X EQ_Cooler.CompNum
VM_POP DINT X Display.Index
; END_IF
VM_LABEL L214
VM_RTS

; Stats_1_DOWN()
VM_FUNCTION _Stats_1_DOWN_
VM_DATA 0
; IF
VM_PUSH DINT X Display.Index
VM_PUSH DINT X EQ_Cooler.CompNum
VM_CMP_LT DINT
VM_JZ L216
; THEN
VM_PUSH DINT X Display.Index
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X Display.Index
VM_JUMP L217
VM_LABEL L216
; ELSE
VM_PUSH_IMM DINT 1
VM_POP DINT X Display.Index
; END_IF
VM_LABEL L217
VM_RTS

; PopUpQuestion_Confirm()
VM_FUNCTION _PopUpQuestion_Confirm_
VM_DATA 0
VM_PUSH USINT EF popup_StatePRG
VM_POP USINT X StatePRG
; CASE
VM_PUSH USINT X PopUp_Question
; OF
VM_CASE USINT 8 L220
VM_CASE USINT 9 L221
VM_CASE USINT 10 L222
VM_CASE USINT 20 L223
VM_POP_AWAY USINT
VM_JUMP L219
VM_LABEL L220
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[1]
VM_JSR _PopUp_ESC_
VM_JUMP L219
VM_LABEL L221
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[2]
VM_JSR _PopUp_ESC_
VM_JUMP L219
VM_LABEL L222
VM_PUSH_IMM BOOL 1
VM_POP BOOL X ResetHoursComp[3]
VM_JSR _PopUp_ESC_
VM_JUMP L219
VM_LABEL L223
EF_GOTO_MASK Reboot
VM_PUSH UDINT X Temp_MB_Baudrate
VM_POP UDINT X BMS.Baudrate
VM_PUSH USINT X Temp_MB_StopBits
VM_POP USINT X BMS.StopBits
VM_PUSH USINT X Temp_MB_Parity
VM_POP USINT X BMS.Parity
VM_PUSH_IMM BOOL 1
VM_POP BOOL X En_Reboot
VM_LABEL L219
VM_RTS

; PopUpQuestion_Reject()
VM_FUNCTION _PopUpQuestion_Reject_
VM_DATA 0
VM_JSR _PopUp_ESC_
VM_RTS

; DOWN_button()
VM_FUNCTION _DOWN_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L225
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L225
VM_JZ L224
; THEN
VM_JSR _Move_DOWN_
VM_LABEL L224
; END_IF
VM_RTS

; UP_button()
VM_FUNCTION _UP_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_DUP BOOL
VM_JNZ L227
VM_POP_AWAY BOOL
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_LABEL L227
VM_JZ L226
; THEN
VM_JSR _Move_UP_
VM_LABEL L226
; END_IF
VM_RTS

; ShowPopUpMessage(USINT, USINT)
VM_FUNCTION _ShowPopUpMessage_USINT_USINT_
VM_DATA 2
VM_POPL USINT 1
VM_POPL USINT 0
VM_PUSH USINT X StatePRG
VM_POP USINT EF popup_StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_POP USINT X StatePRG
EF_STORE_MASK
VM_PUSHL USINT 1
VM_POP USINT X DTPopUp
VM_PUSHL USINT 0
VM_POP USINT X PopUp_Message
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Show_DTPopUp
VM_PUSH_IMM BOOL 1
VM_POP BOOL EF En_PopUpTimer
EF_GOTO_MASK PopUp_Message_Mask
VM_RTS

; PRG_button()
VM_FUNCTION _PRG_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L228
; THEN
; IF
VM_PUSH BOOL X FLR_Disc_CTRL.Active
VM_JZ L229
; THEN
VM_PUSH_IMM USINT 8
VM_PUSH USINT EF POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_JUMP L230
VM_LABEL L229
; ELSE
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L230
VM_JUMP L232
VM_LABEL L228
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L233
; THEN
EF_COMPARE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_LABEL L233
; END_IF
VM_LABEL L232
VM_RTS

; ENTER_button()
VM_FUNCTION _ENTER_button_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L234
; THEN
EF_COMPARE
EF_NEXT_FIELD
VM_LABEL L234
; END_IF
VM_RTS

; Net_Settings_PRG()
VM_FUNCTION _Net_Settings_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L235
; THEN
EF_STORE_MASK
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
VM_JUMP L236
VM_LABEL L235
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L237
; THEN
EF_COMPARE
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L239
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS.Parity
VM_CMP_NE USINT
VM_LABEL L239
VM_DUP BOOL
VM_JNZ L240
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS.StopBits
VM_CMP_NE USINT
VM_LABEL L240
VM_JZ L238
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L241
VM_LABEL L238
; ELSE
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM USINT 1
VM_POP USINT X NextCycleAction
; END_IF
VM_LABEL L241
VM_LABEL L237
; END_IF
VM_LABEL L236
VM_RTS

; Net_Settings_ESC()
VM_FUNCTION _Net_Settings_ESC_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L243
; THEN
VM_JSR _GlobalEsc_
VM_JUMP L244
VM_LABEL L243
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L245
; THEN
EF_COMPARE
; IF
VM_PUSH UDINT X Temp_MB_Baudrate
VM_PUSH UDINT X BMS.Baudrate
VM_CMP_NE UDINT
VM_DUP BOOL
VM_JNZ L247
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_Parity
VM_PUSH USINT X BMS.Parity
VM_CMP_NE USINT
VM_LABEL L247
VM_DUP BOOL
VM_JNZ L248
VM_POP_AWAY BOOL
VM_PUSH USINT X Temp_MB_StopBits
VM_PUSH USINT X BMS.StopBits
VM_CMP_NE USINT
VM_LABEL L248
VM_JZ L246
; THEN
VM_PUSH_IMM USINT 20
VM_JSR _ShowPopUpQuestion_USINT_
VM_JUMP L249
VM_LABEL L246
; ELSE
VM_JSR _GlobalEsc_
; END_IF
VM_LABEL L249
VM_LABEL L245
; END_IF
VM_LABEL L244
VM_RTS

; IO_DOWN()
VM_FUNCTION _IO_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L251
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L252
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L253
; THEN
VM_PUSH_IMM DINT 4
VM_POP DINT X CurRow
VM_JUMP L254
VM_LABEL L253
; ELSE
; IF
VM_PUSH USINT X Display.MaskID
VM_PUSH_IMM USINT 11
VM_CMP_EQ USINT
VM_JZ L256
; THEN
VM_PUSH_IMM DINT 5
VM_POP DINT X CurRow
VM_JUMP L257
VM_LABEL L256
; ELSE
EF_BEEP
; END_IF
VM_LABEL L257
; END_IF
VM_LABEL L254
VM_JUMP L259
VM_LABEL L252
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L260
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L261
VM_LABEL L260
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L262
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L263
VM_LABEL L262
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L264
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L265
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[1]
VM_JUMP L266
VM_LABEL L265
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L267
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[1]
VM_LABEL L267
; END_IF
VM_LABEL L266
VM_JUMP L268
VM_LABEL L264
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L269
; THEN
; CASE
VM_PUSH USINT X Display.MaskID
; OF
VM_CASE USINT 11 L271
VM_CASE USINT 13 L271
VM_CASE USINT 12 L272
VM_CASE USINT 14 L273
VM_POP_AWAY USINT
VM_JUMP L270
VM_LABEL L271
VM_PUSH_IMM USINT 2
VM_POP USINT X Display.value_BOOL[2]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L270
VM_LABEL L272
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L274
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L275
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L275
; END_IF
VM_JUMP L276
VM_LABEL L274
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L277
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 10
VM_DIV INT
VM_SUB INT
VM_PUSH_IMM INT 1
VM_SUB INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MinINT[1]
VM_CMP_LT INT
VM_JZ L278
; THEN
VM_PUSH INT X Display.value_MaxINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L278
; END_IF
VM_LABEL L277
; END_IF
VM_LABEL L276
VM_JUMP L270
VM_LABEL L273
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH_IMM REAL 0
VM_CMP_LT REAL
VM_JZ L279
; THEN
VM_PUSH_IMM REAL 0
VM_POP REAL X Display.value_REAL[1]
EF_BEEP
VM_LABEL L279
; END_IF
VM_LABEL L270
VM_JUMP L280
VM_LABEL L269
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L281
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[3]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L282
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[3]
VM_JUMP L283
VM_LABEL L282
; ELSE
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[3]
; END_IF
VM_LABEL L283
VM_LABEL L281
; END_IF
VM_LABEL L280
VM_LABEL L268
VM_LABEL L263
VM_LABEL L261
VM_LABEL L259
VM_JUMP L285
VM_LABEL L251
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH DINT X cnt_Items
VM_CMP_GT DINT
VM_JZ L287
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L287
; END_IF
; END_IF
VM_LABEL L285
VM_RTS

; IO_UP()
VM_FUNCTION _IO_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L288
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L289
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L290
; THEN
VM_PUSH_IMM DINT 4
VM_POP DINT X CurRow
VM_JUMP L291
VM_LABEL L290
; ELSE
; IF
VM_PUSH USINT X Display.MaskID
VM_PUSH_IMM USINT 11
VM_CMP_EQ USINT
VM_JZ L293
; THEN
VM_PUSH_IMM DINT 5
VM_POP DINT X CurRow
VM_JUMP L294
VM_LABEL L293
; ELSE
EF_BEEP
; END_IF
VM_LABEL L294
; END_IF
VM_LABEL L291
VM_JUMP L296
VM_LABEL L289
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L297
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L298
VM_LABEL L297
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L299
; THEN
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_JUMP L300
VM_LABEL L299
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 3
VM_CMP_EQ DINT
VM_JZ L301
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 0
VM_CMP_EQ USINT
VM_JZ L302
; THEN
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[1]
VM_JUMP L303
VM_LABEL L302
; IF
VM_PUSH USINT X Display.value_BOOL[1]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L304
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[1]
VM_LABEL L304
; END_IF
VM_LABEL L303
VM_JUMP L305
VM_LABEL L301
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 4
VM_CMP_EQ DINT
VM_JZ L306
; THEN
; CASE
VM_PUSH USINT X Display.MaskID
; OF
VM_CASE USINT 11 L308
VM_CASE USINT 13 L308
VM_CASE USINT 12 L309
VM_CASE USINT 14 L310
VM_POP_AWAY USINT
VM_JUMP L307
VM_LABEL L308
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[2]
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L307
VM_LABEL L309
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L311
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L312
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L312
; END_IF
VM_JUMP L313
VM_LABEL L311
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L314
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT INT
VM_PUSH_IMM INT 10
VM_DIV INT
VM_ADD INT
VM_PUSH_IMM INT 1
VM_ADD INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MaxINT[1]
VM_CMP_GT INT
VM_JZ L315
; THEN
VM_PUSH INT X Display.value_MinINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L315
; END_IF
VM_LABEL L314
; END_IF
VM_LABEL L313
VM_JUMP L307
VM_LABEL L310
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT REAL
VM_PUSH_IMM REAL 10
VM_DIV REAL
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH_IMM REAL 10
VM_CMP_GT REAL
VM_JZ L316
; THEN
VM_PUSH_IMM REAL 10
VM_POP REAL X Display.value_REAL[1]
EF_BEEP
VM_LABEL L316
; END_IF
VM_LABEL L307
VM_JUMP L317
VM_LABEL L306
; IF
VM_PUSH DINT X CurRow_modePRG
VM_PUSH_IMM DINT 5
VM_CMP_EQ DINT
VM_JZ L318
; THEN
; IF
VM_PUSH USINT X Display.value_BOOL[3]
VM_PUSH_IMM USINT 1
VM_CMP_EQ USINT
VM_JZ L319
; THEN
VM_PUSH_IMM USINT 0
VM_POP USINT X Display.value_BOOL[3]
VM_JUMP L320
VM_LABEL L319
; ELSE
VM_PUSH_IMM USINT 1
VM_POP USINT X Display.value_BOOL[3]
; END_IF
VM_LABEL L320
VM_LABEL L318
; END_IF
VM_LABEL L317
VM_LABEL L305
VM_LABEL L300
VM_LABEL L298
VM_LABEL L296
VM_JUMP L322
VM_LABEL L288
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L324
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L324
; END_IF
; END_IF
VM_LABEL L322
VM_RTS

; IO_ENTER()
VM_FUNCTION _IO_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L325
; THEN
; IF
VM_PUSH DINT X CurRow
VM_PUSH_IMM DINT 0
VM_CMP_NE DINT
VM_JZ L326
; THEN
VM_PUSH DINT X CurRow
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_JUMP L327
VM_LABEL L326
; ELSE
VM_PUSH DINT X CurRow_modePRG
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
; END_IF
VM_LABEL L327
VM_LABEL L325
; END_IF
VM_RTS

; IO_PRG()
VM_FUNCTION _IO_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L329
; THEN
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_JUMP L330
VM_LABEL L329
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L331
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L332
VM_LABEL L331
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_JZ L333
; THEN
VM_PUSH_IMM USINT 17
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_LABEL L333
; END_IF
VM_LABEL L332
VM_LABEL L330
VM_RTS

; CORR_UP()
VM_FUNCTION _CORR_UP_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L334
; THEN
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L335
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_REAL[8]
VM_ADD REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_CMP_GT REAL
VM_JZ L336
; THEN
VM_PUSH REAL X Display.value_MinREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L336
; END_IF
VM_JUMP L337
VM_LABEL L335
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L338
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_INT[8]
VM_ADD INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MaxINT[1]
VM_CMP_GT INT
VM_JZ L339
; THEN
VM_PUSH INT X Display.value_MinINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L339
; END_IF
VM_LABEL L338
; END_IF
VM_LABEL L337
VM_JUMP L340
VM_LABEL L334
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_SUB DINT
VM_PUSH_IMM DINT 1
VM_SUB DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH_IMM DINT 1
VM_CMP_LT DINT
VM_JZ L342
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH DINT X cnt_Items
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L342
; END_IF
; END_IF
VM_LABEL L340
VM_RTS

; CORR_ENTER()
VM_FUNCTION _CORR_ENTER_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L343
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_LABEL L343
; END_IF
VM_RTS

; CORR_PRG()
VM_FUNCTION _CORR_PRG_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_READY
VM_CMP_EQ USINT
VM_JZ L344
; THEN
VM_PUSH USINT EF STATE_PRG_ON
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 3
VM_POP DINT X CurRow_modePRG
VM_JUMP L345
VM_LABEL L344
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L346
; THEN
VM_PUSH USINT EF STATE_PRG_READY
VM_POP USINT X StatePRG
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow
VM_PUSH_IMM DINT 0
VM_POP DINT X CurRow_modePRG
VM_PUSH_IMM BOOL 1
VM_POP BOOL X MaskMng.ValueWasChanged
VM_JUMP L347
VM_LABEL L346
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_OFF
VM_CMP_EQ USINT
VM_JZ L348
; THEN
VM_PUSH_IMM USINT 17
VM_PUSH USINT EF SHORT_POPUP_TIME
VM_JSR _ShowPopUpMessage_USINT_USINT_
VM_LABEL L348
; END_IF
VM_LABEL L347
VM_LABEL L345
VM_RTS

; CORR_DOWN()
VM_FUNCTION _CORR_DOWN_
VM_DATA 0
; IF
VM_PUSH USINT X StatePRG
VM_PUSH USINT EF STATE_PRG_ON
VM_CMP_EQ USINT
VM_JZ L349
; THEN
; IF
VM_PUSH BOOL X Display.en_RealValue[1]
VM_JZ L350
; THEN
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_REAL[8]
VM_SUB REAL
VM_POP REAL X Display.value_REAL[1]
; IF
VM_PUSH REAL X Display.value_REAL[1]
VM_PUSH REAL X Display.value_MinREAL[1]
VM_CMP_LT REAL
VM_JZ L351
; THEN
VM_PUSH REAL X Display.value_MaxREAL[1]
VM_POP REAL X Display.value_REAL[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L351
; END_IF
VM_JUMP L352
VM_LABEL L350
; IF
VM_PUSH BOOL X Display.en_IntValue[1]
VM_JZ L353
; THEN
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_INT[8]
VM_SUB INT
VM_POP INT X Display.value_INT[1]
; IF
VM_PUSH INT X Display.value_INT[1]
VM_PUSH INT X Display.value_MinINT[1]
VM_CMP_LT INT
VM_JZ L354
; THEN
VM_PUSH INT X Display.value_MaxINT[1]
VM_POP INT X Display.value_INT[1]
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
EF_BEEP
VM_LABEL L354
; END_IF
VM_LABEL L353
; END_IF
VM_LABEL L352
VM_JUMP L355
VM_LABEL L349
; ELSE
VM_PUSH DINT X mask_List_pos
VM_PUSH INT X __SYSVA_KEY_COUNTER
VM_CAST INT DINT
VM_PUSH_IMM DINT 20
VM_DIV DINT
VM_ADD DINT
VM_PUSH_IMM DINT 1
VM_ADD DINT
VM_POP DINT X mask_List_pos
; IF
VM_PUSH DINT X mask_List_pos
VM_PUSH DINT X cnt_Items
VM_CMP_GT DINT
VM_JZ L357
; THEN
VM_PUSH_IMM INT 0
VM_POP INT X __SYSVA_KEY_COUNTER
VM_PUSH_IMM DINT 1
VM_POP DINT X mask_List_pos
EF_BEEP
VM_LABEL L357
; END_IF
; END_IF
VM_LABEL L355
VM_RTS

; Hide_Baudrate_Class_UP()
VM_FUNCTION _Hide_Baudrate_Class_UP_
VM_DATA 0
; CASE
VM_PUSH UDINT X __SYSVA_TMP_VALUE
; OF
VM_CASE UDINT 1200 L359
VM_CASE UDINT 2400 L360
VM_CASE UDINT 4800 L361
VM_CASE UDINT 9600 L362
VM_CASE UDINT 19200 L363
VM_CASE UDINT 38400 L364
VM_CASE UDINT 57600 L365
VM_CASE UDINT 76800 L366
VM_CASE UDINT 115200 L367
VM_CASE UDINT 375000 L368
VM_POP_AWAY UDINT
VM_JUMP L358
VM_LABEL L359
VM_PUSH_IMM UDINT 2400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L360
VM_PUSH_IMM UDINT 4800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L361
VM_PUSH_IMM UDINT 9600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L362
VM_PUSH_IMM UDINT 19200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L363
VM_PUSH_IMM UDINT 38400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L364
VM_PUSH_IMM UDINT 57600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L365
VM_PUSH_IMM UDINT 76800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L366
VM_PUSH_IMM UDINT 115200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L367
VM_PUSH_IMM UDINT 375000
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L358
VM_LABEL L368
EF_BEEP
VM_PUSH_IMM UDINT 1200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_LABEL L358
VM_RTS

; Hide_Baudrate_Class_DOWN()
VM_FUNCTION _Hide_Baudrate_Class_DOWN_
VM_DATA 0
; CASE
VM_PUSH UDINT X __SYSVA_TMP_VALUE
; OF
VM_CASE UDINT 1200 L370
VM_CASE UDINT 2400 L371
VM_CASE UDINT 4800 L372
VM_CASE UDINT 9600 L373
VM_CASE UDINT 19200 L374
VM_CASE UDINT 38400 L375
VM_CASE UDINT 57600 L376
VM_CASE UDINT 76800 L377
VM_CASE UDINT 115200 L378
VM_CASE UDINT 375000 L379
VM_POP_AWAY UDINT
VM_JUMP L369
VM_LABEL L370
EF_BEEP
VM_PUSH_IMM UDINT 375000
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L371
VM_PUSH_IMM UDINT 1200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L372
VM_PUSH_IMM UDINT 2400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L373
VM_PUSH_IMM UDINT 4800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L374
VM_PUSH_IMM UDINT 9600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L375
VM_PUSH_IMM UDINT 19200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L376
VM_PUSH_IMM UDINT 38400
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L377
VM_PUSH_IMM UDINT 57600
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L378
VM_PUSH_IMM UDINT 76800
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_JUMP L369
VM_LABEL L379
VM_PUSH_IMM UDINT 115200
VM_POP UDINT X __SYSVA_TMP_VALUE
VM_LABEL L369
VM_RTS

; Upgrade_1_ENTER()
VM_FUNCTION _Upgrade_1_ENTER_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.Check_Upgrade
VM_RTS

; Upgrade_1_PRG()
VM_FUNCTION _Upgrade_1_PRG_
VM_DATA 0
; IF
VM_PUSH BOOL X Upgrade.En_FirmWare
VM_JZ L380
; THEN
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.En_Upgrade
EF_GOTO_MASK Upgrade_Progress
VM_JUMP L381
VM_LABEL L380
; ELSE
VM_JSR _Upgrade_1_ENTER_
; END_IF
VM_LABEL L381
VM_RTS

; Upgrade_OS_ESC()
VM_FUNCTION _Upgrade_OS_ESC_
VM_DATA 0
VM_PUSH_IMM BOOL 0
VM_POP BOOL X Upgrade.REQ_OS_upgrade
EF_GOTO_MASK Upgrade_OS
VM_RTS

; Upgrade_OS_PRG()
VM_FUNCTION _Upgrade_OS_PRG_
VM_DATA 0
VM_PUSH_IMM BOOL 1
VM_POP BOOL X Upgrade.ANSW_OS_upgrade
EF_GOTO_MASK Upgrade_Progress
VM_RTS

; __INIT__()
VM_FUNCTION ___INIT___
VM_DATA 0
VM_PUSH_IMM INT 1
VM_POP INT X IdxImgQM
VM_PUSH_IMM USINT 1
VM_POP USINT EF STATE_PRG_READY
VM_PUSH_IMM USINT 2
VM_POP USINT EF STATE_PRG_ALWAYS_ON
VM_PUSH_IMM USINT 3
VM_POP USINT EF STATE_PRG_ON
VM_PUSH_IMM USINT 0
VM_POP USINT EF STATE_PRG_OFF
VM_PUSH_IMM USINT 1
VM_POP USINT EF SHORT_POPUP_TIME
VM_PUSH_IMM USINT 5
VM_POP USINT EF POPUP_TIME
VM_PUSH_IMM INT 3
VM_POP INT EF QUICK_MENU_ITEMS_NO
VM_PUSH_IMM INT 1
VM_POP INT EF IdxQM
VM_RTS
